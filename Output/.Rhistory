library(texreg)
library(stargazer)
library(kableExtra)
stargazer(lifeReg, header = F, title = "Our Beautiful Regression!")
lifeMod <- as.formula(lifeExp ~ gdpPercap + pop)
continents <- levels(gapminder$continent)
lifeRegxCont <- lapply(continents, function(x){
sample <- filter(gapminder, continent %in% x)
return(lm(formula = lifeMod, data = sample))
})
htmlreg(lifeRegxCont, file = "lifeRegxContinent.doc", custom.model.names = continents)
?do
stargazer(lifeReg, header = F, title = "Our Beautiful Regression!")
stargazer::stargazer(lifeReg, header = F, title = "Our Beautiful Regression!")
stargazer::stargazer(lifeReg, header = F, title = "Our Beautiful Regression!", type = "html")
stargazer(lifeReg, header = F, title = "Our Beautiful Regression!", type = "html")
?stargazer
stargazer(lifeReg, type = "html", header = F, title = "Our Beautiful Regression!")
stargazer(lifeReg, type = "html", header = F, title = "Our Beautiful Regression!")
library(texreg)
library(stargazer)
library(kableExtra)
stargazer(lifeReg, type = "html", header = F, title = "Our Beautiful Regression!")
stargazer::stargazer(lifeReg, type = "html", header = F, title = "Our Beautiful Regression!")
stargazer::stargazer(lifeReg, type = "html", header = F, title = "Our Beautiful Regression!")
stargazer::stargazer(lifeReg, type = "html", header = F, title = "Our Beautiful Regression!")
lifeMod <- as.formula(lifeExp ~ gdpPercap + pop)
continents <- levels(gapminder$continent)
lifeRegxCont <- lapply(continents, function(x){
sample <- filter(gapminder, continent %in% x)
return(lm(formula = lifeMod, data = sample))
})
htmlreg(lifeRegxCont, file = "lifeRegxContinent.doc", custom.model.names = continents)
htmlreg(lifeRegxCont, file = "lifeRegxContinent.doc", custom.model.names = continents)
?htmlreg
lifeMod <- as.formula(lifeExp ~ gdpPercap + pop)
continents <- levels(gapminder$continent)
lifeRegxCont <- lapply(continents, function(x){
sample <- filter(gapminder, continent %in% x)
return(lm(formula = lifeMod, data = sample))
})
htmlreg(lifeRegxCont, file = "lifeRegxContinent.doc", custom.model.names = continents)
htmlreg(lifeRegxCont)
htmlreg(lifeRegxCont, custom.model.names = continents)
htmlreg(lifeRegxCont, file = "lifeRegxContinent.doc", custom.model.names = continents)
htmlreg(lifeRegxCont, file = "lifeRegxContinent.doc", custom.model.names = continents)
htmlreg(lifeRegxCont, custom.model.names = continents)
htmlreg(lifeRegxCont, custom.model.names = continents)
# I'm not going to include code to install these packages unless you want them
library(quantmod)
library(forecast)
install.packages(forecast)
install.packages("forecast")
# I'm not going to include code to install these packages unless you want them
library(quantmod)
library(forecast)
# Retrieve daily values for the S&P 500 from FRED
getSymbols("SP500",src="FRED", from = "2010-01-01")
# Notice an 'xts' object called 'SP500' is now in your environment
glimpse(SP500)
# For practice, convert it to a dataframe with a date variable
sp <- as.data.frame(SP500)
sp$date <- as.Date(rownames(sp))
ggplot(sp, aes(x = date, y = SP500)) + geom_line()
# I'm not going to include code to install these packages unless you want them
library(quantmod)
library(forecast)
# Retrieve daily values for the S&P 500 from FRED
getSymbols("SP500",src="FRED", from = "2010-01-01")
# Notice an 'xts' object called 'SP500' is now in your environment
glimpse(SP500)
# For practice, convert it to a dataframe with a date variable
sp <- as.data.frame(SP500)
sp$date <- as.Date(rownames(sp))
ggplot(sp, aes(x = date, y = SP500)) + geom_line()
hw <- 'hello world'
print(hw)
paste0(sample(strsplit(hw,'')[[1]],11),collapse='')
install.packages('tidyverse')
install.packages('gapminder')
library(tidyverse)
library(gapminder)
# We'll also create a copy of the gapminder data
gap <- gapminder
gapminder
asiaGap <- filter(gapminder,continent=='Asia')
asiaGap
asiaGap <- filter(gap,continent=='Asia',year==1952,pop<5e5)
asiaGap
filter(gap,country=='United States' | country == 'Canada')
filter(gap,country %in% c('United States','United Kingdom','Australia'),year>2000)
select(gap,country,year,pop)
select(gap,-continent)
print(starwars)
names(starwars)
select(starwars,contains('color'),name)
select(filter(gap,continent=='Europe',year==1952),-continent)
hw <- 'hello world'
hw %>%
strsplit('') %>%
"[["(1) %>%
sample(11) %>%
paste0(collapse='')
#paste0(sample(strsplit(hw,'')[[1]],11),collapse='')
gap %>% filter(year==1952) %>%
filter(pop<quantile(pop,0.1)) %>%
select(country,pop)
yr = 1952
q = 0.1
gap %>% filter(year==yr) %>%
filter(pop<quantile(pop,q))
yr = 1952
q = 0.1
var='pop'
gap %>% filter(year==yr) %>%
filter(var<quantile(var,q))
install.packages("tidyverse")
install.packages("gapminder")
hw <- 'hello world'
print(hw)
paste0(sample(strsplit(hw,'')[[1]],11),collapse='')
install.packages('tidyverse')
install.packages('gapminder')
install.packages("tidyverse")
install.packages("gapminder")
if( !( c('tidyverse','gapminder') %in% rownames(installed.packages()))){
install.package('WDI')
}
library(tidyverse)
library(gapminder)
# We'll also create a copy of the gapminder data
gap <- gapminder
gapminder
asiaGap <- filter(gapminder,continent=='Asia')
asiaGap
asiaGap <- filter(gap,continent=='Asia',year==1952,pop<5e5)
asiaGap
filter(gap,country=='United States' | country == 'Canada')
filter(gap,country %in% c('United States','United Kingdom','Australia'),year>2000)
select(gap,country,year,pop)
select(gap,-continent)
print(starwars)
names(starwars)
select(starwars,contains('color'),name)
select(filter(gap,continent=='Europe',year==1952),-continent)
hw <- 'hello world'
hw %>%
strsplit('') %>%
"[["(1) %>%
sample(11) %>%
paste0(collapse='')
#paste0(sample(strsplit(hw,'')[[1]],11),collapse='')
gap %>% filter(year==1952) %>%
filter(pop<quantile(pop,0.1)) %>%
select(country,pop)
yr = 1952
q = 0.1
gap %>% filter(year==yr) %>%
filter(pop<quantile(pop,q))
yr = 1952
q = 0.1
var='pop'
gap %>% filter(year==yr) %>%
filter(var<quantile(var,q))
gap %>% rename(population = pop)
gap %>% select(country,continent,year,population = pop)
gap %>% arrange(year,country)
gap %>% filter(year==1952) %>%
arrange(desc(lifeExp))
gap %>%
mutate(gdp = pop*gdpPercap)
gap %>% filter(year==1952) %>% summarize(n=n())
gap %>%
group_by(continent) %>%
summarize(n=n())
gap %>%
filter(continent == "Asia") %>%
group_by(year) %>%
summarize(minLifeExp = min(lifeExp), maxLifeExp = max(lifeExp))
gap %>%
group_by(continent) %>%
summarize(n=n_distinct(country))
gap %>%
group_by(continent,year) %>%
mutate(continentProportion = pop/sum(pop)) %>%
arrange(-year,continent,-pop) %>%
filter(pop==max(pop)) #%>%
#ggplot()+geom_line(aes(x=year,y=continentProportion,color=country))
popGrowths <- gap %>%
filter(year %in% c(min(year),max(year))) %>%
group_by(country) %>%
mutate(popGrowthFactor = max(pop)/min(pop)) %>%
select(country,continent,popGrowthFactor) %>%
distinct() %>%
arrange(-popGrowthFactor)
popGrowths
popGrowths %>%
filter(continent%in%c('Europe','Americas')) %>%
ggplot()+geom_density(aes(x=popGrowthFactor,color=continent))
starwars %>%
group_by(species) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
arrange(height) %>%
mutate(height_rank = min_rank(-height))
#Find worst five year change in life expectancy, by continent
gap %>%
select(country, year, continent, lifeExp) %>%
group_by(continent, country) %>%
## within country, take (lifeExp in year i) - (lifeExp in year i - 1)
## positive means lifeExp went up, negative means it went down
#arrange(continent,country,-lifeExp) %>%
mutate(le_delta = lifeExp - lag(lifeExp)) %>%
## within country, retain the worst lifeExp change = smallest or most negative
summarize(worst_le_delta = min(le_delta, na.rm = TRUE)) %>%
## within continent, retain the row with the lowest worst_le_delta
top_n(-1, wt = worst_le_delta) %>%
arrange(worst_le_delta)
#
library(tidyverse)
library(gapminder)
gap <- gapminder #Create a copy
eurPops <- gapminder %>%
filter(continent == 'Europe',year==1952|year==2002) %>%
select(country,year,pop)
eurPops
eurPops <- eurPops %>%
pivot_wider(names_from = year, values_from = pop, names_prefix = 'pop')
eurPops
eurPops %>% mutate(popDiff = pop2002 - pop1952, popFactor = pop2002/pop1952) %>%
arrange(-popFactor)
gapminder
gap %>% pivot_longer(cols = c(lifeExp,pop,gdpPercap))
gap %>% pivot_longer(cols = c(lifeExp,pop,gdpPercap,year)) %>% pivot_longer(cols=c(country,continent),names_to='stringName',names_repair = 'minimal',values_to='string')
billboard #song rankings for billboard top 100 from 2000
billboard %>% group_by(artist) %>% tally() %>% arrange(-n)
billboardLong <- billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",
values_to = "rank",
values_drop_na = TRUE
)
billboardLong
billboardLong %>% filter(artist == 'Jay-Z') %>%
mutate(week=as.integer(week)) %>%
ggplot()+geom_line(aes(x=week,y=100-rank,color=track))
chartLengths <- billboardLong %>%
group_by(artist,track) %>%
summarize(chartLength = n()) %>%
arrange(-chartLength)
chartLengths
billboardLong %>% filter(track %in% chartLengths$track[1:3]) %>%
mutate(week=as.integer(week)) %>%
ggplot()+geom_line(aes(x=week,y=100-rank,color=track))
if( !( 'WDI' %in% rownames(installed.packages()))){
install.package('WDI')
}
library(WDI)
WDI <- WDI(indicator='EN.ATM.CO2E.KT', country="all",start=1962, end=2007) %>% rename(CO2 = EN.ATM.CO2E.KT)
WDI
lj <- left_join(gap, WDI, by = c("country", "year"))
lj
rj <- right_join(gap, WDI,  by = c("country", "year"))
rj
ij <- inner_join(gap, WDI,  by = c("country", "year"))
ij
fj <- full_join(gap, WDI,  by = c("country", "year"))
fj
unique(gap$continent)
cont <- "Asia"
res <- gap %>% filter(continent == cont) %>% summarise(avg = mean(lifeExp))
print(paste0("The avg life expentency of ", cont, " is: ", res))
cont <- "Europe"
res <- gap %>% filter(continent == cont) %>% summarise(avg = mean(lifeExp))
paste0("The avg life expentency of ", cont, " is: ", res)
for (cont in unique(gapminder$continent)) {
res <- gapminder %>% filter(continent == cont) %>% summarise(avg = mean(lifeExp))
print(paste0("The avg life expentency of ", cont, " is: ", res))
}
yr <- c("1952", "1957")
for (cont in unique(gapminder$continent)) {
for (y in yr) {
res <- gapminder %>% filter(continent == cont, year == y) %>% summarise(avg = mean(lifeExp))
print(paste0("The avg life expentency of ", cont,  " in the year ", y, " is: ", res))
}
}
NameOfFunction <- function(Arguments)
{
body
}
my_mean <- function(data,col)
{
avg <- sum(data[col])/nrow(data)
return(avg)
}
my_mean(gap,'lifeExp')
my_mean(gap, 'gdpPercap')
gap_avg <- function(cont, y)
{
res <- gapminder %>% filter(continent == cont, year == y) %>% summarise(avg = mean(lifeExp))
print(paste0("The average life expectancy for ", cont,  " in the year ", y, " is: ", res))
}
gap_avg('Asia', 1952)
yr <- c("1952", "1957")
for (cont in unique(gapminder$continent)) {
for(y in yr){
gap_avg(cont, y)
}
}
x <- list("R", "is", "cool")
lapply(x, nchar)
lapply(gap[,4:6], mean)
a <- list(3, 2, 5)
lapply(a, function(x) { 2 * x })
conts <-  c('Asia', 'Europe')
mapply(gap_avg,conts, yr)
swirl::install_course("Getting and Cleaning Data")
# swirl::swirl
swirl::install_course("Getting and Cleaning Data")
# swirl::swirl
mPackages <- installed.packages()
# Details of installed packages
stInstalled <- rownames( mPackages )
# Isolate thep package names
stRequired <- c('tidyverse', 'gapminder')
#  The required packages
for ( stName in stRequired ){
if ( !( stName %in% stInstalled ) ){
cat('****************** Installing ', stName, '****************** \n')
install.packages( stName )
}
library( stName, character.only=TRUE )
}
# create a copy of the gapminder data
gap <- gapminder
gapminder
# I'm not going to include code to install these packages unless you want them
library(quantmod)
library(forecast)
# Retrieve daily values for the S&P 500 from FRED
getSymbols("SP500",src="FRED", from = "2010-01-01")
# Notice an 'xts' object called 'SP500' is now in your environment
glimpse(SP500)
# For practice, convert it to a dataframe with a date variable
sp <- as.data.frame(SP500)
sp$date <- as.Date(rownames(sp))
ggplot(sp, aes(x = date, y = SP500)) + geom_line()
install.packages('cronR')
cronR:::cron_rstudioaddin()
cronR:::cron_rstudioaddin()
install.packages('shinyFiles')
cronR:::cron_rstudioaddin()
cronR:::cron_rstudioaddin()
56.58*0.317
111.17*0.343
shiny::runApp('Documents/GitHub/liang_GaR/Output')
library(readxl)
Result_original2 <- read_excel("Documents/GitHub/liang_GaR/Output/Result_original2.xlsx")
View(Result_original2)
GaR <- read_excel("Documents/GitHub/liang_GaR/Output/Result_original2.xlsx")
read_excel("Result_original2.xlsx")
getwd()
setwd("/Users/malcalakovalski/Documents/GitHub/liang_GaR/Output/")
getwd()
read_excel("Result_original2.xlsx")
GaR <- read_excel("Result_original2.xlsx")
class(GaR$Time)
library(lubridate)
class(as.date(GaR$Time))
class(as.Date(GaR$Time))
as.Date(Gar$Time)
as.Date(GaR$Time)
read_excel("Result_original2.xlsx") %>% as.Date(GaR$Time)
read_excel("Result_original2.xlsx") %>%  as.date(Time)
read_excel("Result_original2.xlsx") %>%  as.Date(Time)
GaR %>% as.date(Time)
GaR %>% as.Date(Time)
GaR %>% mutate(date = as.Date(Time))
GaR %>% mutate(Time = as.Date(Time))
read_excel("Result_original2.xlsx") %>%
mutate(Time = as.Date(Time))
GaR <- read_excel("Result_original2.xlsx") %>%
mutate(Time = as.Date(Time))
lubrdiate
year(GaR$Time)
library(string)
library(magrittr)
paste(year(GaR$Time), "Q", semester(GaR$Time)) %>% str_replace("Q\\s", "Q")
read.csv("result.csv", stringsAsFactors = FALSE)
GaR <- read_excel("Result_original2.xlsx") %>%
mutate(Time = as.Date(Time)) %>%
mutate(Quarter = paste(year(GaR$Time), "Q", semester(GaR$Time)) %>% str_replace("Q\\s", "Q"))
GaR <- read_excel("Result_original2.xlsx") %>%
mutate(Time = as.Date(Time)) %>%
mutate(Quarter = paste(year(GaR$Time), "Q", semester(GaR$Time)) %>% str_replace("Q\\s", "Q"))
GaR
GaR <- read_excel("Result_original2.xlsx") %>%
mutate(Time = as.Date(Time)) %>%
mutate(Quarter = paste(year(GaR$Time), "Q", quarter(GaR$Time)) %>% str_replace("Q\\s", "Q"))
GaR
ggplot(GaR) + geom_line(aes(x=Quarter, y = GaR_h4))
ggplot(GaR, aes(Quarter, GaR_h4)) + geom_line()
class(GaR$Quarter)
GaR <- read_excel("Result_original2.xlsx") %>%
mutate(Time = as.Date(Time)) %>%
mutate(Quarter = as.Date(paste(year(GaR$Time), "Q", quarter(GaR$Time)) %>% str_replace("Q\\s", "Q")))
read_excel("Result_original2.xlsx") %>%
mutate(Time = as.Date(Time)) %>%
mutate(Quarter = paste(year(GaR$Time), "Q", quarter(GaR$Time)) %>% str_replace("Q\\s", "Q")) %>%
mutate(Quarter = as.Date(Quarter))
ggplot(GaR, aes(Time, GaR_h4)) + geom_line()
GaR
max(GaR$Time)
?plotOutput
GaR %>% filter(Time == 1975-01-01)
GaR %>% filter(Time > 1975-01-01)
GaR
min(GaR$Time)
?sliderInput
GaR
runApp()
runApp()
min(GaR$Time)
ax(GaR$Time)
max(GaR$Time)
runApp()
library(readr)
result <- read_csv("result.csv")
View(result)
read_csv("result.csv") %>%
mutate(Time = as.Date(Time)) %>%
mutate(Quarter = paste(year(GaR$Time), "Q", quarter(GaR$Time)) %>% str_replace("Q\\s", "Q"))
read_csv("result.csv", stringsAsFactors = FALSE) %>%
mutate(Time = as.Date(Time)) %>%
mutate(Quarter = paste(year(GaR$Time), "Q", quarter(GaR$Time)) %>% str_replace("Q\\s", "Q"))
read.csv("result.csv", stringsAsFactors = FALSE) %>%
mutate(Time = as.Date(Time)) %>%
mutate(Quarter = paste(year(GaR$Time), "Q", quarter(GaR$Time)) %>% str_replace("Q\\s", "Q"))
read.csv("result.csv", stringsAsFactors = FALSE) %>%
mutate(Time = as.Date(Time))
read.csv("result.csv", stringsAsFactors = FALSE)
read.csv("Result_original.csv", stringsAsFactors = FALSE) %>%
mutate(Time = as.Date(Time)) %>%
mutate(Quarter = paste(year(GaR$Time), "Q", quarter(GaR$Time)) %>% str_replace("Q\\s", "Q"))
read.csv("Result_original.csv", stringsAsFactors = FALSE) %>%
mutate(Time = as.Date(Time))
read.csv("Result_original.csv", stringsAsFactors = FALSE)
GaR
class(GaR$Time)
?dateRangeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
GaR
ggplot(GaR, aes(Time, GaR_h4)) + geom_line()
?ggplot
runApp()
runApp()
?dRange
?dateRangeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderTable
?dataTableOutput
runApp()
install.packages(c("ggthemes", "zip"))
runApp()
runApp()
library(shiny)
library(shinydashboard)
library(shinythemes)
library(readxl)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(stringr)
library(magrittr)
library(reshape2)
library(DT)
library(grDevices)
library(ggthemes)
library(zip)
library(shiny)
library(shinydashboard)
library(shinythemes)
library(readxl)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(stringr)
library(magrittr)
library(reshape2)
library(DT)
library(grDevices)
library(ggthemes)
library(zip)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
